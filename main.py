#!/usr/bin/env python3
"""
Aplicaci√≥n principal para el c√°lculo de la Ley de Amdahl
Proyecto: EID2 - Introducci√≥n al C√°lculo
Autor: Aplicaci√≥n con Arquitectura Limpia
Fecha: Julio 2025

Esta aplicaci√≥n resuelve el problema de optimizaci√≥n de GPU usando la Ley de Amdahl
para grupos pares seg√∫n el documento del proyecto.

Modos disponibles:
- GUI: Interfaz gr√°fica moderna con CustomTkinter
- CLI: Interfaz de l√≠nea de comandos
"""

import sys
import os

# Agregar el directorio src al path para las importaciones
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def mostrar_banner():
    """Muestra el banner de la aplicaci√≥n"""
    print("""
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ                                                             ‚îÇ
    ‚îÇ           CALCULADORA LEY DE AMDAHL - GPU                  ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ  Proyecto: EID2 - Introducci√≥n al C√°lculo                  ‚îÇ
    ‚îÇ  Tema: Optimizaci√≥n de componentes GPU                     ‚îÇ
    ‚îÇ  Aplicaci√≥n: Arquitectura Limpia en Python                ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ  üéØ Funcionalidades:                                        ‚îÇ
    ‚îÇ     ‚Ä¢ C√°lculo autom√°tico de aceleraciones                  ‚îÇ
    ‚îÇ     ‚Ä¢ An√°lisis de componentes GPU                          ‚îÇ
    ‚îÇ     ‚Ä¢ Generaci√≥n de gr√°ficos                               ‚îÇ
    ‚îÇ     ‚Ä¢ Resoluci√≥n problema completo                         ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ  üñ•Ô∏è  Modos disponibles:                                     ‚îÇ
    ‚îÇ     ‚Ä¢ GUI: Interfaz gr√°fica moderna                        ‚îÇ
    ‚îÇ     ‚Ä¢ CLI: L√≠nea de comandos                               ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    """)

def seleccionar_modo():
    """Permite al usuario seleccionar el modo de ejecuci√≥n"""
    print("Seleccione el modo de ejecuci√≥n:")
    print("1. üñ•Ô∏è  GUI - Interfaz Gr√°fica (Recomendado)")
    print("2. üíª CLI - L√≠nea de Comandos")
    print("0. ‚ùå Salir")
    
    while True:
        try:
            opcion = input("\nIngrese su opci√≥n (1/2/0): ").strip()
            
            if opcion == "1":
                return "gui"
            elif opcion == "2":
                return "cli"
            elif opcion == "0":
                print("üëã ¬°Hasta luego!")
                return None
            else:
                print("‚ùå Opci√≥n no v√°lida. Ingrese 1, 2 o 0.")
                
        except (KeyboardInterrupt, EOFError):
            print("\nüëã ¬°Hasta luego!")
            return None

def ejecutar_gui():
    """Ejecuta la interfaz gr√°fica"""
    try:
        print("üöÄ Iniciando interfaz gr√°fica...")
        from src.presentation.gui import main as gui_main
        gui_main()
    except ImportError as e:
        print(f"\n‚ùå Error: No se pueden importar las dependencias de GUI: {e}")
        print("\nüí° Soluci√≥n: Instale las dependencias faltantes:")
        print("   pip install customtkinter matplotlib pillow")
        print("\nüîÑ Cambiando autom√°ticamente a modo CLI...")
        ejecutar_cli()
    except Exception as e:
        print(f"\n‚ùå Error en GUI: {e}")
        print("üîÑ Cambiando a modo CLI como respaldo...")
        ejecutar_cli()

def ejecutar_cli():
    """Ejecuta la interfaz de l√≠nea de comandos"""
    try:
        print("üíª Iniciando interfaz de l√≠nea de comandos...")
        from src.presentation.cli import main as cli_main
        cli_main()
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico en CLI: {e}")
        sys.exit(1)

def main():
    """Funci√≥n principal"""
    try:
        mostrar_banner()
        
        # Si se pasa argumento de l√≠nea de comandos
        if len(sys.argv) > 1:
            modo = sys.argv[1].lower()
            if modo in ["gui", "g", "--gui"]:
                ejecutar_gui()
                return
            elif modo in ["cli", "c", "--cli"]:
                ejecutar_cli()
                return
            else:
                print(f"‚ùå Argumento no v√°lido: {sys.argv[1]}")
                print("üí° Uso: python main.py [gui|cli]")
                return
        
        # Selecci√≥n interactiva
        modo = seleccionar_modo()
        
        if modo == "gui":
            ejecutar_gui()
        elif modo == "cli":
            ejecutar_cli()
        
    except KeyboardInterrupt:
        print("\nüëã ¬°Aplicaci√≥n interrumpida por el usuario!")
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
