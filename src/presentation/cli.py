"""
Interfaz de l√≠nea de comandos para la aplicaci√≥n de Ley de Amdahl
"""
import sys
from typing import List, Optional
from ..domain.entities import ComponenteGPU
from ..domain.value_objects import ComponentesGPUPredefinidos, ConfiguracionGPUPar
from ..application.use_cases import (
    ResolverProblemaGPUUseCase,
    CalcularAceleracionUseCase,
    CalcularTiempoOptimizadoUseCase,
    GenerarGraficosUseCase,
    AnalizarComponentesUseCase,
    CargarComponentesPredefinidosUseCase
)
from ..infrastructure.calculador_amdahl import CalculadorAmdahl
from ..infrastructure.analizador_componentes import AnalizadorComponentes


class CLIAmdahl:
    """Interfaz de l√≠nea de comandos para la aplicaci√≥n"""
    
    def __init__(self):
        # Dependencias
        self.calculador = CalculadorAmdahl()
        self.analizador = AnalizadorComponentes(self.calculador)
        
        # Casos de uso
        self.cargar_componentes = CargarComponentesPredefinidosUseCase()
        self.calcular_aceleracion = CalcularAceleracionUseCase(self.calculador)
        self.calcular_tiempo = CalcularTiempoOptimizadoUseCase(self.calculador)
        self.analizar_componentes = AnalizarComponentesUseCase(self.analizador)
        
        # Lista de componentes ingresados por el usuario
        self.componentes_usuario: List[ComponenteGPU] = []
    
    def mostrar_menu_principal(self):
        """Muestra el men√∫ principal de la aplicaci√≥n"""
        print("\n" + "="*70)
        print("    CALCULADORA LEY DE AMDAHL - OPTIMIZACI√ìN GPU")
        print("="*70)
        print("1. Resolver problema completo (Grupos Pares - GPU)")
        print("2. Calcular aceleraci√≥n de componente personalizado")
        print("3. Mostrar componentes predefinidos")
        print("4. Analizar √∫ltimos 3 componentes ingresados")
        print("5. Generar gr√°ficos") 
        print("6. Mostrar informaci√≥n te√≥rica")
        print("0. Salir")
        print("="*70)
    
    def ejecutar(self):
        """Ejecuta la aplicaci√≥n principal"""
        while True:
            try:
                self.mostrar_menu_principal()
                opcion = input("Seleccione una opci√≥n: ").strip()
                
                if opcion == "0":
                    print("\n¬°Gracias por usar la Calculadora de Ley de Amdahl!")
                    break
                elif opcion == "1":
                    self.resolver_problema_completo()
                elif opcion == "2":
                    self.calcular_componente_personalizado()
                elif opcion == "3":
                    self.mostrar_componentes_predefinidos()
                elif opcion == "4":
                    self.analizar_ultimos_tres()
                elif opcion == "5":
                    self.generar_graficos_menu()
                elif opcion == "6":
                    self.mostrar_informacion_teorica()
                else:
                    print("‚ùå Opci√≥n no v√°lida. Intente nuevamente.")
                    
            except KeyboardInterrupt:
                print("\n\n¬°Aplicaci√≥n interrumpida por el usuario!")
                break
            except Exception as e:
                print(f"‚ùå Error inesperado: {e}")
                input("Presione Enter para continuar...")
    
    def resolver_problema_completo(self):
        """Resuelve el problema completo para grupos pares (GPU)"""
        print("\n" + "="*60)
        print("  RESOLUCI√ìN PROBLEMA COMPLETO - GRUPOS PARES (GPU)")
        print("="*60)
        
        try:
            # Importar aqu√≠ para evitar errores si matplotlib no est√° instalado
            from ..infrastructure.visualizador_matplotlib import VisualizadorMatplotlib
            visualizador = VisualizadorMatplotlib()
            
            resolver_problema = ResolverProblemaGPUUseCase(
                self.calculador, self.analizador, visualizador
            )
            
            print("Resolviendo problema...")
            resultados = resolver_problema.resolver_problema_completo()
            
            self._mostrar_resultados_completos(resultados)
            
        except ImportError:
            print("‚ö†Ô∏è  Matplotlib no disponible. Resolviendo sin gr√°ficos...")
            self._resolver_sin_graficos()
        except Exception as e:
            print(f"‚ùå Error al resolver problema: {e}")
        
        input("\nPresione Enter para continuar...")
    
    def _resolver_sin_graficos(self):
        """Resuelve el problema sin generar gr√°ficos"""
        componentes = self.cargar_componentes.execute()
        
        print("\n1. ACELERACI√ìN PARA CADA COMPONENTE:")
        print("-" * 50)
        
        resultados = []
        for componente in componentes:
            resultado = self.calcular_aceleracion.execute(componente)
            resultados.append(resultado)
            
            print(f"‚Ä¢ {componente.nombre}:")
            print(f"  - f = {componente.porcentaje_mejora:.1%}, k = {componente.factor_mejora}")
            print(f"  - Aceleraci√≥n: {resultado.aceleracion:.4f}x")
            print(f"  - L√≠mite te√≥rico: {resultado.limite_teorico:.4f}x")
            print()
        
        print("2. AN√ÅLISIS TIEMPO N√öCLEOS CUDA (50ms ‚Üí ? ms):")
        print("-" * 50)
        nucleos_cuda = next(c for c in componentes 
                           if c.nombre == ComponentesGPUPredefinidos.NUCLEOS_CUDA)
        resultado_tiempo = self.calcular_tiempo.execute(nucleos_cuda, 50.0)
        
        print(f"‚Ä¢ Tiempo original: {resultado_tiempo.tiempo_original}ms")
        print(f"‚Ä¢ Tiempo optimizado: {resultado_tiempo.tiempo_optimizado}ms")
        print(f"‚Ä¢ Mejora total: {resultado_tiempo.porcentaje_mejora_total:.1f}%")
        
        print("\n3. COMPONENTE PARA 30% DE ACELERACI√ìN:")
        print("-" * 50)
        for resultado in sorted(resultados, key=lambda x: x.aceleracion, reverse=True):
            if resultado.aceleracion >= 1.3:
                print(f"‚úÖ {resultado.componente.nombre} logra {resultado.aceleracion:.4f}x (‚â• 1.30x)")
                break
        else:
            print("‚ùå Ning√∫n componente individual logra 30% de aceleraci√≥n")
        
        print("\n4. AN√ÅLISIS COMPARATIVO:")
        print("-" * 50)
        analisis = self.analizar_componentes.determinar_mejor_optimizacion(componentes)
        print(f"üèÜ Mejor componente: {analisis.mejor_componente.nombre}")
        print(f"üìä Ranking de aceleraciones:")
        for i, (nombre, aceleracion) in enumerate(analisis.obtener_ranking(), 1):
            print(f"   {i}. {nombre}: {aceleracion:.4f}x")
    
    def calcular_componente_personalizado(self):
        """Permite calcular aceleraci√≥n para un componente personalizado"""
        print("\n" + "="*50)
        print("  C√ÅLCULO COMPONENTE PERSONALIZADO")
        print("="*50)
        
        try:
            nombre = input("Nombre del componente: ").strip()
            if not nombre:
                print("‚ùå El nombre no puede estar vac√≠o")
                return
            
            porcentaje_str = input("Porcentaje mejorable (ejemplo: 25 para 25%): ").strip()
            porcentaje = float(porcentaje_str) / 100
            
            factor_str = input("Factor de mejora (k): ").strip()
            factor = float(factor_str)
            
            componente = ComponenteGPU(nombre, porcentaje, factor)
            resultado = self.calcular_aceleracion.execute(componente)
            
            # Agregar a la lista de componentes del usuario
            self.componentes_usuario.append(componente)
            
            print(f"\nüìä RESULTADOS PARA '{nombre}':")
            print("-" * 40)
            print(f"‚Ä¢ Fracci√≥n mejorable (f): {porcentaje:.1%}")
            print(f"‚Ä¢ Factor de mejora (k): {factor}")
            print(f"‚Ä¢ Aceleraci√≥n obtenida: {resultado.aceleracion:.4f}x")
            print(f"‚Ä¢ L√≠mite te√≥rico (k‚Üí‚àû): {resultado.limite_teorico:.4f}x")
            print(f"‚Ä¢ Eficiencia: {(resultado.aceleracion/resultado.limite_teorico)*100:.1f}%")
            
            # Preguntar si quiere calcular tiempo optimizado
            calcular_tiempo = input("\n¬øCalcular tiempo optimizado? (s/n): ").lower().startswith('s')
            if calcular_tiempo:
                tiempo_original = float(input("Tiempo original (ms/s): "))
                resultado_tiempo = self.calcular_tiempo.execute(componente, tiempo_original)
                print(f"\n‚è±Ô∏è  AN√ÅLISIS TEMPORAL:")
                print(f"‚Ä¢ Tiempo original: {resultado_tiempo.tiempo_original}")
                print(f"‚Ä¢ Tiempo optimizado: {resultado_tiempo.tiempo_optimizado}")
                print(f"‚Ä¢ Mejora total: {resultado_tiempo.porcentaje_mejora_total:.1f}%")
            
        except ValueError as e:
            print(f"‚ùå Error en los valores ingresados: {e}")
        except Exception as e:
            print(f"‚ùå Error: {e}")
        
        input("\nPresione Enter para continuar...")
    
    def mostrar_componentes_predefinidos(self):
        """Muestra los componentes GPU predefinidos"""
        print("\n" + "="*60)
        print("  COMPONENTES GPU PREDEFINIDOS (GRUPOS PARES)")
        print("="*60)
        
        componentes = self.cargar_componentes.execute()
        
        for i, componente in enumerate(componentes, 1):
            resultado = self.calcular_aceleracion.execute(componente)
            
            print(f"\n{i}. {componente.nombre}")
            print("-" * 40)
            print(f"   ‚Ä¢ Porcentaje mejorable: {componente.porcentaje_mejora:.1%}")
            print(f"   ‚Ä¢ Factor de mejora: {componente.factor_mejora}")
            print(f"   ‚Ä¢ Aceleraci√≥n: {resultado.aceleracion:.4f}x")
            print(f"   ‚Ä¢ L√≠mite te√≥rico: {resultado.limite_teorico:.4f}x")
        
        input("\nPresione Enter para continuar...")
    
    def analizar_ultimos_tres(self):
        """Analiza los √∫ltimos 3 componentes ingresados por el usuario"""
        print("\n" + "="*50)
        print("  AN√ÅLISIS √öLTIMOS 3 COMPONENTES")
        print("="*50)
        
        if len(self.componentes_usuario) == 0:
            print("‚ùå No hay componentes ingresados por el usuario.")
            print("   Primero ingrese algunos componentes usando la opci√≥n 2.")
            input("\nPresione Enter para continuar...")
            return
        
        print(f"üìù Total de componentes ingresados: {len(self.componentes_usuario)}")
        
        ultimos_tres = self.componentes_usuario[-3:]
        analisis = self.analizar_componentes.analizar_ultimos_tres_componentes(
            self.componentes_usuario
        )
        
        print(f"\nüîç Analizando √∫ltimos {len(ultimos_tres)} componente(s):")
        print("-" * 50)
        
        for i, componente in enumerate(ultimos_tres, 1):
            resultado = next(r for r in analisis.resultados if r.componente == componente)
            print(f"{i}. {componente.nombre}")
            print(f"   ‚Ä¢ f={componente.porcentaje_mejora:.1%}, k={componente.factor_mejora}")
            print(f"   ‚Ä¢ Aceleraci√≥n: {resultado.aceleracion:.4f}x")
        
        print(f"\nüèÜ MEJOR OPCI√ìN: {analisis.mejor_componente.nombre}")
        print(f"üìä Ranking:")
        for i, (nombre, aceleracion) in enumerate(analisis.obtener_ranking(), 1):
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "  "
            print(f"   {emoji} {i}. {nombre}: {aceleracion:.4f}x")
        
        print(f"\nüìã JUSTIFICACI√ìN:")
        print(analisis.justificacion)
        
        input("\nPresione Enter para continuar...")
    
    def generar_graficos_menu(self):
        """Men√∫ para generar gr√°ficos (requiere matplotlib)"""
        print("\n" + "="*50)
        print("  GENERACI√ìN DE GR√ÅFICOS")
        print("="*50)
        
        try:
            from ..infrastructure.visualizador_matplotlib import VisualizadorMatplotlib
            visualizador = VisualizadorMatplotlib()
            generar_graficos = GenerarGraficosUseCase(visualizador)
            
            print("1. Gr√°fico A vs k (para f=0.25 y f=0.35)")
            print("2. Gr√°fico A vs f (para diferentes k)")
            print("3. Comparaci√≥n de componentes predefinidos")
            print("4. L√≠mite te√≥rico")
            print("0. Volver")
            
            opcion = input("\nSeleccione opci√≥n: ").strip()
            
            if opcion == "1":
                print("Generando gr√°fico A vs k...")
                generar_graficos.graficar_a_vs_k([0.25, 0.35])
            elif opcion == "2":
                print("Generando gr√°fico A vs f...")
                generar_graficos.graficar_a_vs_f([4, 8])
            elif opcion == "3":
                self._graficar_comparacion_componentes(visualizador)
            elif opcion == "4":
                self._graficar_limite_teorico(visualizador)
            elif opcion == "0":
                return
            else:
                print("‚ùå Opci√≥n no v√°lida")
                
        except ImportError:
            print("‚ùå Matplotlib no est√° instalado.")
            print("   Instale con: pip install matplotlib")
        except Exception as e:
            print(f"‚ùå Error al generar gr√°ficos: {e}")
        
        input("\nPresione Enter para continuar...")
    
    def _graficar_comparacion_componentes(self, visualizador):
        """Genera gr√°fico de comparaci√≥n de componentes"""
        componentes = self.cargar_componentes.execute()
        datos = []
        
        for componente in componentes:
            resultado = self.calcular_aceleracion.execute(componente)
            datos.append({
                'nombre': componente.nombre,
                'aceleracion': resultado.aceleracion
            })
        
        visualizador.graficar_comparacion_componentes(datos)
    
    def _graficar_limite_teorico(self, visualizador):
        """Genera gr√°fico del l√≠mite te√≥rico"""
        porcentajes = [i/100 for i in range(5, 96, 5)]
        visualizador.graficar_limite_teorico(porcentajes)
    
    def mostrar_informacion_teorica(self):
        """Muestra informaci√≥n te√≥rica sobre la Ley de Amdahl"""
        print("\n" + "="*70)
        print("  INFORMACI√ìN TE√ìRICA - LEY DE AMDAHL")
        print("="*70)
        
        info = """
üìö LA LEY DE AMDAHL

La Ley de Amdahl predice la mejora m√°xima al optimizar un componente:

    A = 1 / ((1-f) + f/k)

Donde:
‚Ä¢ A: Aceleraci√≥n obtenida
‚Ä¢ f: Fracci√≥n mejorable del sistema (0 ‚â§ f ‚â§ 1)
‚Ä¢ k: Factor de mejora del componente (k > 1)

üîç L√çMITE TE√ìRICO:
Cuando k ‚Üí ‚àû: A_max = 1/(1-f)

üìä INTERPRETACI√ìN:
‚Ä¢ f=0.5, k=‚àû ‚Üí A_max = 2x (m√°ximo posible)
‚Ä¢ f=0.9, k=‚àû ‚Üí A_max = 10x (m√°ximo posible)
‚Ä¢ La fracci√≥n NO mejorable (1-f) limita la aceleraci√≥n total

üéØ APLICACI√ìN EN GPU:
‚Ä¢ N√∫cleos CUDA: Paralelizaci√≥n de c√°lculos
‚Ä¢ Memoria VRAM: Acceso a datos
‚Ä¢ Unidades Texturizado: Procesamiento de texturas
‚Ä¢ NVLink: Comunicaci√≥n entre GPUs

üí° CONCLUSI√ìN CLAVE:
Es m√°s efectivo optimizar componentes con mayor fracci√≥n 
mejorable (f) que aumentar indefinidamente el factor k.
"""
        print(info)
        input("Presione Enter para continuar...")
    
    def _mostrar_resultados_completos(self, resultados: dict):
        """Muestra los resultados completos del problema"""
        print("\nüéØ RESULTADOS PROBLEMA COMPLETO:")
        print("="*60)
        
        # Mostrar aceleraciones
        print("\n1Ô∏è‚É£  ACELERACIONES POR COMPONENTE:")
        for resultado in resultados["resultados_aceleracion"]:
            print(f"‚Ä¢ {resultado.componente.nombre}: {resultado.aceleracion:.4f}x")
        
        # Mostrar tiempo n√∫cleos CUDA
        print(f"\n2Ô∏è‚É£  TIEMPO N√öCLEOS CUDA:")
        tiempo_resultado = resultados["tiempo_nucleos_cuda"]
        print(f"‚Ä¢ Original: {tiempo_resultado.tiempo_original}ms")
        print(f"‚Ä¢ Optimizado: {tiempo_resultado.tiempo_optimizado}ms")
        print(f"‚Ä¢ Mejora: {tiempo_resultado.porcentaje_mejora_total:.1f}%")
        
        # Componente para 30%
        print(f"\n3Ô∏è‚É£  COMPONENTE PARA ‚â•30% ACELERACI√ìN:")
        comp_30 = resultados["componente_30_porciento"]
        if comp_30:
            aceleracion_30 = self.calculador.calcular_aceleracion(comp_30)
            print(f"‚úÖ {comp_30.nombre}: {aceleracion_30:.4f}x")
        else:
            print("‚ùå Ning√∫n componente individual logra ‚â•30%")
        
        # Mejor componente
        print(f"\n4Ô∏è‚É£  MEJOR COMPONENTE GENERAL:")
        analisis = resultados["analisis_comparativo"]
        print(f"üèÜ {analisis.mejor_componente.nombre}")
        
        # Explicaci√≥n NVLink
        print(f"\n5Ô∏è‚É£  LIMITACI√ìN DE NVLINK:")
        print(resultados["explicacion_nvlink"])
        
        # Comparaci√≥n
        print(f"\n6Ô∏è‚É£  TEXTURIZADO vs VRAM:")
        comparacion = resultados["comparacion_texturizado_vs_vram"]
        tex_data = comparacion["texturizado"]
        vram_data = comparacion["vram"]
        print(f"‚Ä¢ Texturizado: {tex_data['aceleracion']:.4f}x")
        print(f"‚Ä¢ VRAM: {vram_data['aceleracion']:.4f}x")
        print(f"‚Ä¢ Mejor: {comparacion['mejor'].upper()}")


def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    try:
        cli = CLIAmdahl()
        cli.ejecutar()
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
