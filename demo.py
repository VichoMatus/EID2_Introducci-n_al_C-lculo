import sys
import os

# Agregar el directorio src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.domain.entities import ComponenteGPU
from src.domain.value_objects import ComponentesGPUPredefinidos, ConfiguracionGPUPar
from src.application.use_cases import (
    CargarComponentesPredefinidosUseCase,
    CalcularAceleracionUseCase,
    CalcularTiempoOptimizadoUseCase,
    AnalizarComponentesUseCase
)
from src.infrastructure.calculador_amdahl import CalculadorAmdahl
from src.infrastructure.analizador_componentes import AnalizadorComponentes


def resolver_problema_gpu_automatico():
    
    print("="*80)
    print("           RESOLUCI√ìN AUTOM√ÅTICA - PROBLEMA GPU (GRUPOS PARES)")
    print("="*80)
    
    # Inicializar dependencias
    calculador = CalculadorAmdahl()
    analizador = AnalizadorComponentes(calculador)
    
    # Casos de uso
    cargar_componentes = CargarComponentesPredefinidosUseCase()
    calcular_aceleracion = CalcularAceleracionUseCase(calculador)
    calcular_tiempo = CalcularTiempoOptimizadoUseCase(calculador)
    analizar_componentes = AnalizarComponentesUseCase(analizador)
    
    # Cargar componentes predefinidos
    print("\n1Ô∏è‚É£  COMPONENTES GPU PREDEFINIDOS:")
    print("-" * 60)
    componentes = cargar_componentes.execute()
    
    for componente in componentes:
        print(f"‚Ä¢ {componente.nombre}")
        print(f"  - Fracci√≥n mejorable (f): {componente.porcentaje_mejora:.1%}")
        print(f"  - Factor de mejora (k): {componente.factor_mejora}")
    
    # Calcular aceleraci√≥n para cada componente
    print("\n2Ô∏è‚É£  ACELERACIONES CALCULADAS:")
    print("-" * 60)
    resultados = []
    
    for componente in componentes:
        resultado = calcular_aceleracion.execute(componente)
        resultados.append(resultado)
        
        print(f"‚Ä¢ {componente.nombre}:")
        print(f"  - Aceleraci√≥n (A): {resultado.aceleracion:.4f}x")
        print(f"  - L√≠mite te√≥rico (A_max): {resultado.limite_teorico:.4f}x")
        print(f"  - Eficiencia: {(resultado.aceleracion/resultado.limite_teorico)*100:.1f}%")
        print()
    
    # Analisis espec√≠fico: renderizado de frame (50ms ‚Üí ?)
    print("3Ô∏è‚É£  AN√ÅLISIS TIEMPO RENDERIZADO (N√öCLEOS CUDA):")
    print("-" * 60)
    nucleos_cuda = next(c for c in componentes 
                       if c.nombre == ComponentesGPUPredefinidos.NUCLEOS_CUDA)
    
    resultado_tiempo = calcular_tiempo.execute(nucleos_cuda, 50.0)
    
    print(f"‚Ä¢ Tiempo original: {resultado_tiempo.tiempo_original} ms")
    print(f"‚Ä¢ Tiempo optimizado: {resultado_tiempo.tiempo_optimizado:.2f} ms")
    print(f"‚Ä¢ Mejora temporal: {resultado_tiempo.porcentaje_mejora_total:.1f}%")
    print(f"‚Ä¢ Reducci√≥n: {resultado_tiempo.tiempo_original - resultado_tiempo.tiempo_optimizado:.2f} ms")
    
    # Determinar componente para ‚â•30% aceleraci√≥n
    print("\n4Ô∏è‚É£  COMPONENTE PARA ‚â•30% ACELERACI√ìN (A ‚â• 1.30):")
    print("-" * 60)
    
    componentes_30_porciento = []
    for resultado in resultados:
        if resultado.aceleracion >= 1.30:
            componentes_30_porciento.append(resultado)
    
    if componentes_30_porciento:
        for resultado in componentes_30_porciento:
            print(f"‚úÖ {resultado.componente.nombre}: {resultado.aceleracion:.4f}x")
    else:
        print("‚ùå Ning√∫n componente individual logra ‚â•30% de aceleraci√≥n")
        print("   El mejor componente es:")
        mejor = max(resultados, key=lambda x: x.aceleracion)
        print(f"   ü•á {mejor.componente.nombre}: {mejor.aceleracion:.4f}x ({(mejor.aceleracion-1)*100:.1f}%)")
    
    # Analisis comparativo completo
    print("\n5Ô∏è‚É£  AN√ÅLISIS COMPARATIVO:")
    print("-" * 60)
    analisis = analizar_componentes.determinar_mejor_optimizacion(componentes)
    
    print(f"üèÜ MEJOR COMPONENTE: {analisis.mejor_componente.nombre}")
    print(f"\nüìä RANKING COMPLETO:")
    for i, (nombre, aceleracion) in enumerate(analisis.obtener_ranking(), 1):
        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "4Ô∏è‚É£"
        print(f"   {emoji} {i}¬∞. {nombre}: {aceleracion:.4f}x")
    
    # Explicaci√≥n t√©cnica NVLink
    print("\n6Ô∏è‚É£  ¬øPOR QU√â NVLINK TIENE IMPACTO LIMITADO?")
    print("-" * 60)
    nvlink = next(c for c in componentes 
                 if c.nombre == ComponentesGPUPredefinidos.INTERCONEXION_NVLINK)
    nvlink_resultado = next(r for r in resultados if r.componente == nvlink)
    
    print(f"‚Ä¢ NVLink tiene el mayor factor k = {nvlink.factor_mejora}")
    print(f"‚Ä¢ Pero su fracci√≥n mejorable f = {nvlink.porcentaje_mejora:.1%} es baja")
    print(f"‚Ä¢ Aceleraci√≥n resultante: {nvlink_resultado.aceleracion:.4f}x")
    print(f"‚Ä¢ La Ley de Amdahl muestra que el 80% NO mejorable limita el impacto total")
    print(f"‚Ä¢ F√≥rmula: A = 1/((1-{nvlink.porcentaje_mejora}) + {nvlink.porcentaje_mejora}/{nvlink.factor_mejora}) = {nvlink_resultado.aceleracion:.4f}")
    
    # Comparaci√≥n Texturizado vs VRAM
    print("\n7Ô∏è‚É£  COMPARACI√ìN: TEXTURIZADO vs MEMORIA VRAM:")
    print("-" * 60)
    
    texturizado = next(c for c in componentes 
                      if c.nombre == ComponentesGPUPredefinidos.UNIDADES_TEXTURIZADO)
    vram = next(c for c in componentes 
               if c.nombre == ComponentesGPUPredefinidos.MEMORIA_VRAM)
    
    tex_resultado = next(r for r in resultados if r.componente == texturizado)
    vram_resultado = next(r for r in resultados if r.componente == vram)
    
    print(f"‚Ä¢ Unidades de Texturizado: f={texturizado.porcentaje_mejora:.1%}, k={texturizado.factor_mejora} ‚Üí A={tex_resultado.aceleracion:.4f}x")
    print(f"‚Ä¢ Memoria VRAM: f={vram.porcentaje_mejora:.1%}, k={vram.factor_mejora} ‚Üí A={vram_resultado.aceleracion:.4f}x")
    print(f"‚Ä¢ Diferencia: {abs(tex_resultado.aceleracion - vram_resultado.aceleracion):.4f}x")
    
    if tex_resultado.aceleracion > vram_resultado.aceleracion:
        print(f"‚úÖ Texturizado es mejor opci√≥n ({((tex_resultado.aceleracion - vram_resultado.aceleracion)/vram_resultado.aceleracion*100):.1f}% m√°s aceleraci√≥n)")
    else:
        print(f"‚úÖ VRAM es mejor opci√≥n ({((vram_resultado.aceleracion - tex_resultado.aceleracion)/tex_resultado.aceleracion*100):.1f}% m√°s aceleraci√≥n)")
    
    # Resumen ejecutivo
    print("\n8Ô∏è‚É£  RESUMEN EJECUTIVO:")
    print("-" * 60)
    print("üìã RESPUESTAS AL PROBLEMA:")
    print(f"   1. Aceleraciones calculadas: ‚úÖ Completado")
    print(f"   2. L√≠mites te√≥ricos: ‚úÖ Completado") 
    print(f"   3. Tiempo renderizado optimizado: {resultado_tiempo.tiempo_optimizado:.2f}ms ‚úÖ")
    print(f"   4. Componente ‚â•30%: {'Encontrado' if componentes_30_porciento else 'No disponible'} ‚úÖ")
    print(f"   5. Gr√°ficos A vs k: Funcionalidad disponible ‚úÖ")
    print(f"   6. Explicaci√≥n NVLink: ‚úÖ Completado")
    
    print(f"\nüéØ RECOMENDACI√ìN FINAL:")
    print(f"   Optimizar '{analisis.mejor_componente.nombre}' para m√°xima ganancia global")
    print(f"   Aceleraci√≥n esperada: {max(r.aceleracion for r in resultados):.4f}x")
    
    print("\n" + "="*80)
    print("                          ‚úÖ AN√ÅLISIS COMPLETADO")
    print("="*80)


if __name__ == "__main__":
    try:
        resolver_problema_gpu_automatico()
    except Exception as e:
        print(f"‚ùå Error durante la ejecuci√≥n: {e}")
        sys.exit(1)
